.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RANDPKT 1"
.TH RANDPKT 1 "2020-10-29" "3.4.0" "The Wireshark Network Analyzer"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
randpkt \- Random packet generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrandpkt\fR
[\ \fB\-b\fR\ <maxbytes>\ ]
[\ \fB\-c\fR\ <count>\ ]
[\ \fB\-t\fR\ <type>\ ]
<filename>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBrandpkt\fR is a small utility that creates a \fBpcap\fR trace file
full of random packets.
.PP
By creating many randomized packets of a certain type, you can
test packet sniffers to see how well they handle malformed packets.
The sniffer can never trust the data that it sees in the packet because
you can always sniff a very bad packet that conforms to no standard.
\&\fBrandpkt\fR produces \fIvery bad\fR packets.
.PP
When creating packets of a certain type, \fBrandpkt\fR uses a sample
packet that is stored internally to \fBrandpkt\fR. It uses this as the
starting point for your random packets, and then adds extra random
bytes to the end of this sample packet.
.PP
For example, if you choose to create random \s-1ARP\s0 packets, \fBrandpkt\fR
will create a packet which contains a predetermined Ethernet \s-1II\s0 header,
with the Type field set to \s-1ARP.\s0 After the Ethernet \s-1II\s0 header, it will
put a random number of bytes with random values.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-b <maxbytes>" 4
.IX Item "-b <maxbytes>"
Default 5000.
.Sp
Defines the maximum number of bytes added to the sample packet.
If you choose a \fBmaxbytes\fR value that is less than the size of the
sample packet, then your packets would contain only the sample
packet... not much variance there! \fBrandpkt\fR exits on that condition.
.IP "\-c <count>" 4
.IX Item "-c <count>"
Default 1000.
.Sp
Defines the number of packets to generate.
.IP "\-t <type>" 4
.IX Item "-t <type>"
Default Ethernet \s-1II\s0 frame.
.Sp
Defines the type of packet to generate:
.Sp
.Vb 10
\&        arp             Address Resolution Protocol
\&        bgp             Border Gateway Protocol
\&        bvlc            BACnet Virtual Link Control
\&        dns             Domain Name Service
\&        eth             Ethernet
\&        fddi            Fiber Distributed Data Interface
\&        giop            General Inter\-ORB Protocol
\&        icmp            Internet Control Message Protocol
\&        ip              Internet Protocol
\&        ipv6            Internet Protocol Version 6
\&        llc             Logical Link Control
\&        m2m             WiMAX M2M Encapsulation Protocol
\&        megaco          MEGACO
\&        nbns            NetBIOS\-over\-TCP Name Service
\&        ncp2222         NetWare Core Protocol
\&        sctp            Stream Control Transmission Protocol
\&        syslog          Syslog message
\&        tds             TDS NetLib
\&        tcp             Transmission Control Protocol
\&        tr              Token\-Ring
\&        udp             User Datagram Protocol
\&        usb             Universal Serial Bus
\&        usb\-linux       Universal Serial Bus with Linux specific header
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To see a description of the randpkt options use:
.PP
.Vb 1
\&    randpkt
.Ve
.PP
To generate a capture file with 1000 \s-1DNS\s0 packets use:
.PP
.Vb 1
\&    randpkt \-b 500 \-t dns rand_dns.pcap
.Ve
.PP
To generate a small capture file with just a single \s-1LLC\s0 frame use:
.PP
.Vb 1
\&    randpkt \-b 100 \-c 1 \-t llc single_llc.pcap
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBpcap\fR\|(3), \fBeditcap\fR\|(1)
